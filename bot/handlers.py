from aiogram import F, Router, types, Bot
from aiogram.filters import Command
from bot.calendar_instance import calendar
from datetime import datetime

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from calendarapp.models import User, Event, Appointment
from asgiref.sync import sync_to_async

import logging

logger = logging.getLogger(__name__)

router = Router()


def get_bot():
    from bot.loader import bot
    return bot


def get_appointment_model():
    from calendarapp.models import User, Event, Appointment
    return User, Event, Appointment


def main_keyboard():
    keyboard = [
        [
            types.KeyboardButton(text="üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
        ],

        [
            types.KeyboardButton(text="üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
            types.KeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π"),
        ],
        [
            types.KeyboardButton(text="üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
            types.KeyboardButton(text="üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
        ],
    ]
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_invite_keyboard(event_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data=f"invite_event_{event_id}")
        ]]
    )


def get_users_invite_keyboard(event_id, exclude_user_id):
    users = list(User.objects.exclude(telegram_id=exclude_user_id))
    inline_keyboard = []

    for i in range(0, len(users), 2):
        row = [
            InlineKeyboardButton(
                text=users[i].username or f"ID {users[i].telegram_id}",
                callback_data=f"invite_{event_id}_{users[i].telegram_id}",
            )
        ]
        if i + 1 < len(users):
            row.append(
                InlineKeyboardButton(
                    text=users[i + 1].username or f"ID {users[i + 1].telegram_id}",
                    callback_data=f"invite_{event_id}_{users[i + 1].telegram_id}",
                )
            )
        inline_keyboard.append(row)
    inline_keyboard.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="invite_done")])

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


def appointment_action_keyboard(appointment_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"appt_confirm_{appointment_id}")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"appt_cancel_{appointment_id}")]
    ])


async def get_user_events_with_index(user_id):
    events = await calendar.get_all_events(user_id)
    indexed = [
        {**e, 'order': i + 1}
        for i, e in enumerate(events)
    ]
    return indexed


@sync_to_async
def get_appointment_by_id(app_id):
    return Appointment.objects.get(pk=app_id)


@sync_to_async
def update_appointment_status(app_id, new_status):
    appointment = Appointment.objects.get(pk=app_id)
    appointment.status = new_status
    appointment.save()
    return appointment


@router.callback_query(lambda c: c.data.startswith("edit_event_"))
async def start_edit_event_callback(callback: types.CallbackQuery):
    telegram_id = callback.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register", reply_markup=main_keyboard())
        await callback.answer()
        return

    event_id = int(callback.data.split("_")[-1])
    event = await calendar.get_event(user_id, event_id)
    if not event:
        await callback.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_keyboard())
        await callback.answer()
        return

    calendar_edit_state[user_id] = {
        "step": "name",
        "id": event_id
    }
    await callback.message.answer(
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {event['name']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await callback.answer()


@router.message(Command("calendar"))
async def user_calendar_handler(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.",
            reply_markup=main_keyboard()
        )
        return
    events = await calendar.get_all_events(user_id)
    if not events:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.", reply_markup=main_keyboard())
        return
    lines = [
        f"{e['id']}: {e['name']} | {e['date']} {e['time']} ‚Äî {e['details']}"
        for e in events
    ]
    await message.answer("–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å:\n" + "\n".join(lines), reply_markup=main_keyboard())


@router.message(F.text == "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_calendar_month(message: types.Message, bot: Bot):
    html_calendar, year, month = calendar.render_for_template()
    txt = f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞ {month:02}.{year}:\n\n"
    await message.answer(txt + "(–û—Ç–∫—Ä—ã—Ç—å –æ–±—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Å–∞–π—Ç–µ: https://your-domain/calendar/)")


@router.message(Command("invite"))
async def command_invite_user(message: types.Message):
    args = message.text.strip().split()
    if len(args) != 5:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /invite <telegram_id> <event_id> <date> <time>",
            reply_markup=main_keyboard()
        )
        return

    _, invitee_telegram_id, event_id, date, time = args
    organizer_telegram_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    organizer = await calendar.get_user_db_id(organizer_telegram_id)
    invitee = await calendar.get_user_db_id(int(invitee_telegram_id))
    event = await sync_to_async(Event.objects.get)(id=int(event_id))

    if not (organizer and invitee and event):
        await message.answer(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–±—ã—Ç–∏—è.",
            reply_markup=main_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã User
    organizer_obj = await sync_to_async(User.objects.get)(id=organizer)
    invitee_obj = await sync_to_async(User.objects.get)(id=invitee)
    appt = await sync_to_async(calendar.invite_user_to_event)(
        organizer=organizer_obj,
        invitee=invitee_obj,
        event=event,
        date=date,
        time=time,
        details=f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä {message.from_user.full_name}"
    )

    if not appt:
        await message.answer(
            "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç –≤ —ç—Ç–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.",
            reply_markup=main_keyboard()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    bot = get_bot()
    await bot.send_message(
        invitee_telegram_id,
        f"–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ '{event.name}' {date} –≤ {time}.",
        reply_markup=get_invite_keyboard(appt.id)
    )

    await message.answer(
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞.\nID –≤—Å—Ç—Ä–µ—á–∏: {appt.id}",
        reply_markup=main_keyboard()
    )


@router.message(Command("myappointments"))
async def list_my_appointments(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
            reply_markup=main_keyboard()
        )
        return
    user = await sync_to_async(User.objects.get)(id=user_id)
    qs = await calendar.get_busy_appointments(user)
    if not qs:
        await message.answer("–í—Å—Ç—Ä–µ—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_keyboard())
        return
    lines = [
        f"–î–∞—Ç–∞: {a['date']} {a['time']}, —Å—Ç–∞—Ç—É—Å: {a['status']}, event_id: {a['event_id']}"
        for a in qs
    ]
    await message.answer("–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:\n" + "\n".join(lines))


@router.message(Command("pendingappointments"))
async def list_pending_appointments(message: types.Message):
    telegram_id = message.from_user.id
    invitee = await calendar.get_user_db_id(telegram_id)
    if not invitee:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_keyboard())
        return
    pending = await sync_to_async(lambda: list(Appointment.objects.filter(invitee=invitee, status='pending').all()))()
    if not pending:
        await message.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—Å—Ç—Ä–µ—á.", reply_markup=main_keyboard())
        return
    for appt in pending:
        event = appt.event
        await message.answer(
            f"–í—Å—Ç—Ä–µ—á–∞ –æ—Ç {appt.organizer.username or appt.organizer.telegram_id}\n"
            f"–°–æ–±—ã—Ç–∏–µ: {event.name}\n"
            f"–î–∞—Ç–∞: {appt.date} {appt.time}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {appt.details}",
            reply_markup=appointment_action_keyboard(appt.id)
        )


@router.callback_query()
async def appointment_action_callback(callback: types.CallbackQuery):
    data = callback.data
    bot = get_bot()

    if data.startswith("appointment_accept:"):
        appointment_id = int(data.split(":")[1])
        appointment = await sync_to_async(Appointment.objects.filter(id=appointment_id).first)()
        if not appointment or appointment.status != "pending":
            await callback.answer("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ.", show_alert=True)
            return
        appointment.status = "confirmed"
        await sync_to_async(appointment.save)()
        await callback.message.edit_text("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")
        await bot.send_message(
            appointment.organizer.telegram_id,
            f"{appointment.invitee.username} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ \"{appointment.event.name}\"."
        )
        await callback.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")
        return

    if data.startswith("appointment_decline:"):
        appointment_id = int(data.split(":")[1])
        appointment = await sync_to_async(Appointment.objects.filter(id=appointment_id).first)()
        if not appointment or appointment.status != "pending":
            await callback.answer("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ.", show_alert=True)
            return
        appointment.status = "cancelled"
        await sync_to_async(appointment.save)()
        await callback.message.edit_text("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")
        await bot.send_message(
            appointment.organizer.telegram_id,
            f"{appointment.invitee.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ \"{appointment.event.name}\"."
        )
        await callback.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")
        return

    appt_id = int(data.split("_")[-1])
    try:
        appt = await sync_to_async(Appointment.objects.get)(id=appt_id)
    except Appointment.DoesNotExist:
        appt = None

    if not appt:
        await callback.answer("–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    if callback.from_user.id != appt.invitee.telegram_id:
        await callback.answer(
            "–¢–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É.",
            reply_markup=main_keyboard(),
            show_alert=True
        )
        return

    if "confirm" in data:
        appt.status = "confirmed"
        await sync_to_async(appt.save)()
        await callback.message.edit_text("–í—Å—Ç—Ä–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    elif "cancel" in data:
        appt.status = "cancelled"
        await sync_to_async(appt.save)()
        await callback.message.edit_text("–í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")


async def invite_user_handler(message, organizer, invitee, event):
    appointment = await sync_to_async(calendar.invite_user_to_event)(organizer, invitee, event)

    if not appointment:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.")
        return

    bot = get_bot()
    await bot.send_message(
        invitee.telegram_id,
        f"–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ '{event.name}' {event.date} –≤ {event.time}.",
        reply_markup=get_invite_keyboard(appointment.id)
    )
    await message.answer(
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {invitee.username}.",
        reply_markup=main_keyboard()
    )


calendar_creation_state = {}


async def send_welcome(message: types.Message):
    full_name = message.from_user.full_name
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –Ø –±–æ—Ç-–∫–∞–ª–µ–Ω–¥–∞—Ä—å.",
        reply_markup=main_keyboard()
    )


async def get_user_id(message):
    telegram_id = message.from_user.id
    return await calendar.get_user_db_id(telegram_id)


async def register_user_handler(message: types.Message):
    telegram_id = message.from_user.id
    username = message.from_user.username

    user_id = await calendar.get_user_db_id(telegram_id)
    if user_id:
        await message.answer(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
            reply_markup=main_keyboard()
        )
        return

    res = await calendar.register_user(telegram_id, username)
    if res:
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                             reply_markup=main_keyboard()
                             )
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard()
        )


async def button_create_calendar_event(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
            reply_markup=main_keyboard()
        )
        return

    calendar_creation_state[telegram_id] = {"step": "name"}
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=types.ReplyKeyboardRemove()
    )


async def offer_invite_after_event(message, event_id):
    telegram_id = message.from_user.id
    keyboard = get_users_invite_keyboard(event_id, exclude_user_id=telegram_id)
    await message.answer(
        "–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –ö–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å?\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard
    )


async def process_calendar_creation(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
            reply_markup=main_keyboard()
        )
        return

    state = calendar_creation_state.get(telegram_id)
    if not state:
        return

    step = state["step"]

    if step == "name":
        state["name"] = message.text.strip()
        state["step"] = "details"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    elif step == "details":
        state["details"] = message.text.strip()
        state["step"] = "date"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
    elif step == "date":
        state["date"] = message.text.strip()
        state["step"] = "time"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–ß–ß:–ú–ú):")
    elif step == "time":
        state["time"] = message.text.strip()
        try:
            datetime.strptime(state["date"], "%Y-%m-%d")
            datetime.strptime(state["time"], "%H:%M")
            event_id = await calendar.create_event(
                user_id, state["name"], state["date"], state["time"], state["details"]
            )
            await message.answer(
                f"–°–æ–±—ã—Ç–∏–µ '{state['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å!\nID: {event_id}",
                reply_markup=get_invite_keyboard(event_id)
            )
            await offer_invite_after_event(message, event_id)
        except Exception:
            await message.answer(
                "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_keyboard()
            )
        calendar_creation_state.pop(telegram_id, None)


@router.callback_query(lambda cq: cq.data.startswith("invite_event_"))
async def invite_event_start_callback(callback_query: types.CallbackQuery):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–±—ã—Ç–∏—é
    _, _, event_id = callback_query.data.split("_")
    telegram_id = callback_query.from_user.id
    keyboard = get_users_invite_keyboard(event_id, exclude_user_id=telegram_id)
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å:", reply_markup=keyboard
    )


@router.callback_query(lambda cq: cq.data.startswith("invite_"))
async def invite_user_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "invite_done":
        await callback_query.message.edit_text(
            "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=None
        )
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Ç–ø—Ä–∞–≤–ª—è–π –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
        await callback_query.message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_keyboard()
        )
        return

    _, event_id, invitee_tg_id = data.split("_")
    organizer_tg_id = callback_query.from_user.id
    event = await sync_to_async(Event.objects.get)(id=event_id)
    organizer = await sync_to_async(User.objects.get)(telegram_id=organizer_tg_id)
    invitee = await sync_to_async(User.objects.get)(telegram_id=invitee_tg_id)

    appointment = await sync_to_async(calendar.invite_user_to_event)(
        organizer, invitee, event
    )

    if not appointment:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.", show_alert=True)
    else:
        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ
        bot = get_bot()
        await bot.send_message(
            invitee.telegram_id,
            f"–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ '{event.name}' {event.date} –≤ {event.time}.",
            reply_markup=get_invite_keyboard(appointment.id)
        )
        await callback_query.answer(f"{invitee.username} –ø—Ä–∏–≥–ª–∞—à—ë–Ω!", show_alert=True)

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö
    keyboard = get_users_invite_keyboard(event.id, exclude_user_id=organizer_tg_id)
    await callback_query.message.edit_text(
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=keyboard
    )


async def button_list_calendar_events(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register",
            reply_markup=main_keyboard()
        )
        return

    events = await get_user_events_with_index(user_id)
    if not events:
        await message.answer("–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=main_keyboard())
        return
    lines = [
        f"{e['order']}: {e['name']} | {e['date']} {e['time']} ‚Äî {e['details']}"
        for e in events
    ]
    await message.answer("–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:\n" + "\n".join(lines), reply_markup=main_keyboard())


async def calendar_create_handler(message: types.Message):
    await send_welcome(message)


async def calendar_list_handler(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
            reply_markup=main_keyboard()
        )
        return

    events = await get_user_events_with_index(user_id)
    if not events:
        await message.answer("–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=main_keyboard())
        return
    lines = [f"{e['order']}: {e['name']} | {e['date']} {e['time']} ‚Äî {e['details']}" for e in events]
    await message.answer("–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:\n" + "\n".join(lines))


async def calendar_show_handler(message: types.Message):
    args = message.text.strip().split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /calendar_show <id>", reply_markup=main_keyboard())
        return
    try:
        event_id = int(args[1])
        telegram_id = message.from_user.id
        user_id = await calendar.get_user_db_id(telegram_id)
        if not user_id:
            await message.answer(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
                reply_markup=main_keyboard()
            )
            return

        e = await calendar.get_event(user_id, event_id)
        if not e:
            await message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_keyboard())
            return
        await message.answer(
            f"–°–æ–±—ã—Ç–∏–µ:\nID: {e['id']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {e['name']}\n"
            f"–î–∞—Ç–∞: {e['date']} {e['time']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {e['details']}"
        )
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å ID.", reply_markup=main_keyboard())


async def calendar_edit_handler(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
            reply_markup=main_keyboard()
        )
        return

    args = message.text.strip().split(maxsplit=5)
    if len(args) < 6:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π: /calendar_edit <id> <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <–æ–ø–∏—Å–∞–Ω–∏–µ>",
            reply_markup=main_keyboard()
        )
        return
    try:
        _, event_id, name, date, time, details = args
        event_id = int(event_id)
        result = await calendar.edit_event(user_id, event_id, name, date, time, details)
        if result:
            await message.answer("–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_keyboard())
        else:
            await message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_keyboard())
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.", reply_markup=main_keyboard())


async def calendar_delete_handler(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
            reply_markup=main_keyboard()
        )
        return

    args = message.text.strip().split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /calendar_delete <–Ω–æ–º–µ—Ä>", reply_markup=main_keyboard())
        return
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Ö –Ω–æ–º–µ—Ä–∞–º–∏
        events = await get_user_events_with_index(user_id)
        num = int(args[1])
        if not (1 <= num <= len(events)):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_keyboard())
            return
        event_id = events[num - 1]["id"]
        result = await calendar.delete_event(user_id, event_id)
        if result:
            await message.answer("–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_keyboard())
        else:
            await message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_keyboard())
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä.", reply_markup=main_keyboard())


calendar_delete_state = {}


async def button_delete_calendar_event(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
            reply_markup=main_keyboard()
        )
        return

    events = await get_user_events_with_index(user_id)
    if not events:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard())
        return

    lines = [f"{e['order']}: {e['name']} | {e['date']} {e['time']} ‚Äî {e['details']}" for e in events]
    calendar_delete_state[telegram_id] = events  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n" + "\n".join(lines),
        reply_markup=types.ReplyKeyboardRemove()
    )


async def process_calendar_deletion(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id or telegram_id not in calendar_delete_state:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
            reply_markup=main_keyboard()
        )
        return

    events = calendar_delete_state.get(telegram_id)
    try:
        num = int(message.text.strip())
        await message.answer(f"DEBUG: num={num}, len={len(events)}; events orders: {[e['order'] for e in events]}")
        if not (1 <= num <= len(events)):
            raise ValueError
        event_id = events[num - 1]["id"]
        await message.answer(
            f"DEBUG: Telegram ID: {telegram_id}, User DB ID: {user_id}, "
            f"–£–¥–∞–ª—è–µ–º event_id={event_id}, num={num}, –≤—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π={len(events)}"
        )
        result = await calendar.delete_event(user_id, event_id)
        if result:
            await message.answer("–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_keyboard())
            calendar_delete_state.pop(telegram_id, None)
        else:
            await message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_keyboard())
            calendar_delete_state.pop(telegram_id, None)
    except Exception:
        lines = [
            f"{e['order']}: {e['name']} | {e['date']} {e['time']} ‚Äî {e['details']}" for e in events
        ]
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
            + "\n".join(lines)
        )


calendar_edit_state = {}


async def button_edit_calendar_event(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
            reply_markup=main_keyboard()
        )
        return

    events = await get_user_events_with_index(user_id)
    if not events:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.", reply_markup=main_keyboard())
        return

    lines = [f"{e['order']}. {e['name']} | {e['date']} {e['time']} ‚Äî {e['details']}" for e in events]
    calendar_edit_state[telegram_id] = {
        "events": events,
        "step": "num"
    }
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" + "\n".join(lines),
        reply_markup=types.ReplyKeyboardRemove()
    )


async def process_calendar_editing_by_number(message: types.Message):
    telegram_id = message.from_user.id
    state = calendar_edit_state.get(telegram_id)
    if not state:
        return

    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register", reply_markup=main_keyboard())
        calendar_edit_state.pop(telegram_id, None)
        return

    step = state["step"]

    if step == "num":
        try:
            num = int(message.text.strip())
            events = state["events"]
            if not (1 <= num <= len(events)):
                raise ValueError
            event = events[num - 1]
            state.update({
                "id": event["id"],
                "step": "name"
            })
            await message.answer(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {event['name']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        except Exception:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            calendar_edit_state.pop(telegram_id, None)
    elif step == "name":
        state["name"] = message.text.strip()
        state["step"] = "date"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):")
    elif step == "date":
        state["date"] = message.text.strip()
        state["step"] = "time"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):")
    elif step == "time":
        state["time"] = message.text.strip()
        state["step"] = "details"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    elif step == "details":
        state["details"] = message.text.strip()
        try:
            datetime.strptime(state["date"], "%Y-%m-%d")
            datetime.strptime(state["time"], "%H:%M")
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏!", reply_markup=main_keyboard())
            calendar_edit_state.pop(telegram_id, None)
            return

        result = await calendar.edit_event(
            user_id, state["id"], state["name"], state["date"], state["time"], state["details"]
        )
        if result:
            await message.answer("–°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=main_keyboard())
        else:
            await message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_keyboard())
        calendar_edit_state.pop(telegram_id, None)


def register_handlers(router: Router):
    router.message.register(send_welcome, Command("start"))
    router.message.register(register_user_handler, Command("register"))
    router.message.register(user_calendar_handler, Command("calendar"))
    router.message.register(button_create_calendar_event, F.text == "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
    router.message.register(button_list_calendar_events, F.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π")
    router.message.register(process_calendar_creation,
                            lambda msg: calendar_creation_state.get(msg.from_user.id) is not None)
    router.message.register(button_edit_calendar_event, F.text == "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
    router.message.register(process_calendar_editing_by_number,
                            lambda msg: calendar_edit_state.get(msg.from_user.id) is not None)

    router.message.register(calendar_create_handler, Command("calendar_create"))
    router.message.register(calendar_list_handler, Command("calendar_list"))
    router.message.register(calendar_show_handler, Command("calendar_show"))
    router.message.register(calendar_edit_handler, Command("calendar_edit"))
    router.message.register(calendar_delete_handler, Command("calendar_delete"))
    router.message.register(button_delete_calendar_event, F.text == "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
    router.message.register(process_calendar_deletion,
                            lambda msg: calendar_delete_state.get(msg.from_user.id) is not None)
    router.message.register(command_invite_user, Command("invite"))
    router.message.register(list_my_appointments, Command("myappointments"))
    router.message.register(list_pending_appointments, Command("pendingappointments"))
    router.callback_query.register(appointment_action_callback,
                                   lambda c: c.data.startswith("appt_confirm_") or c.data.startswith("appt_cancel_"))
