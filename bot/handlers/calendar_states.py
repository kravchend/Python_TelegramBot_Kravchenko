from aiogram import types, Router, F
from aiogram.filters import Command
from bot.handlers.keyboards import main_keyboard, get_invite_keyboard
from bot.calendar_instance import calendar
from datetime import datetime
from bot.handlers.types import DummyEvent

router = Router()

calendar_creation_state = {}
calendar_delete_state = {}
calendar_edit_state = {}


def log_func(func):
    async def wrapper(*args, **kwargs):
        print(f"[LOG] –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}")
        return await func(*args, **kwargs)

    return wrapper


@router.message(F.text == "‚úèÔ∏è  –°–æ–∑–¥–∞—Ç—å")
@router.message(Command("calendar_create"))
@log_func
async def calendar_create_handler(message: types.Message, **kwargs):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "‚ÑπÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:\ncommand: '/register'",
            reply_markup=main_keyboard()
        )
        return
    calendar_creation_state[telegram_id] = {"step": "name"}
    await message.answer(" ‚òùÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")


@router.message(lambda message: calendar_creation_state.get(message.from_user.id) is not None)
@log_func
async def process_calendar_creation(message: types.Message, **kwargs):
    from bot.handlers.events import render_event_message
    telegram_id = message.from_user.id
    state = calendar_creation_state.get(telegram_id)
    if not state:
        return

    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "‚ÑπÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:\ncommand: '/register'",
            reply_markup=main_keyboard()
        )
        return

    try:
        step = state["step"]

        if step == "name":
            state["name"] = message.text.strip()
            state["step"] = "details"
            await message.answer(" ‚úåÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
            return

        if step == "details":
            state["details"] = message.text.strip()
            state["step"] = "date"
            await message.answer(" ü§ü –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
            return

        if step == "date":
            datetime.strptime(message.text.strip(), "%Y-%m-%d")  # –í–∞–ª–∏–¥–∞—Ü–∏—è
            state["date"] = message.text.strip()
            state["step"] = "time"
            await message.answer(" üññ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–ß–ß:–ú–ú):")
            return

        if step == "time":
            try:
                time_obj = datetime.strptime(message.text.strip(), "%H:%M")
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
                return

            state["time"] = time_obj.strftime("%H:%M:%S")
            event_id = await calendar.create_event(
                user_id, state["name"], state["date"], state["time"], state["details"]
            )

            if not event_id:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.", reply_markup=main_keyboard())
                calendar_creation_state.pop(telegram_id, None)
                return

            from bot.handlers.events import get_user_events_with_index
            events = await get_user_events_with_index(user_id)
            my_event = next((e for e in events if str(e.get("id")) == str(event_id)), None)

            if not my_event:
                await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ.", reply_markup=main_keyboard())
            else:
                text, keyboard = render_event_message(DummyEvent(
                    id=str(my_event["id"]),
                    name=my_event["name"],
                    details=my_event["details"],
                    date=datetime.strptime(my_event["date"], "%Y-%m-%d"),
                    time=datetime.strptime(my_event["time"], "%H:%M:%S"),
                    is_public=bool(my_event.get("is_public", False)),
                ))
                await message.answer(text, reply_markup=keyboard)

            calendar_creation_state.pop(telegram_id, None)

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=main_keyboard())
        calendar_creation_state.pop(telegram_id, None)


@router.message(lambda message: calendar_edit_state.get(message.from_user.id) is not None)
@log_func
async def process_calendar_editing_by_number(message: types.Message, **kwargs):
    telegram_id = message.from_user.id
    state = calendar_edit_state.get(telegram_id)
    if not state:
        return

    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer("‚ÑπÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:\ncommand: '/register'", reply_markup=main_keyboard())
        calendar_edit_state.pop(telegram_id, None)
        return

    step = state["step"]

    if step == "num":
        try:
            num = int(message.text.strip())
            events = state["events"]
            if not (1 <= num <= len(events)):
                raise ValueError
            event = events[num - 1]
            state.update({
                "id": event["id"],
                "step": "name"
            })
            await message.answer(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {event['name']}\n–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        except Exception:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            calendar_edit_state.pop(telegram_id, None)
    elif step == "name":
        state["name"] = message.text.strip()
        state["step"] = "date"
        await message.answer("–ù–æ–≤–∞—è –¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    elif step == "date":
        state["date"] = message.text.strip()
        state["step"] = "time"
        await message.answer("–ù–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):")
    elif step == "time":
        state["time"] = message.text.strip()
        state["step"] = "details"
        await message.answer("–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    elif step == "details":
        state["details"] = message.text.strip()
        try:
            datetime.strptime(state["date"], "%Y-%m-%d")
            datetime.strptime(state["time"], "%H:%M")
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏!", reply_markup=main_keyboard())
            calendar_edit_state.pop(telegram_id, None)
            return

        result = await calendar.edit_event(
            user_id, state["id"], state["name"], state["date"], state["time"], state["details"]
        )
        if result:
            await message.answer(
                "–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n–•–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑—É –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?",
                reply_markup=get_invite_keyboard(state["id"])
            )
        else:
            await message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_keyboard())
        calendar_edit_state.pop(telegram_id, None)


@router.message(F.text == "üîë  –ò–∑–º–µ–Ω–∏—Ç—å")
@log_func
async def button_edit_calendar_event(message: types.Message, **kwargs):
    from bot.handlers.events import get_user_events_with_index
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    if not user_id:
        await message.answer(
            "‚ÑπÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:\ncommand: '/register'",
            reply_markup=main_keyboard()
        )
        return

    events = await get_user_events_with_index(user_id)
    if not events:
        await message.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.", reply_markup=main_keyboard())
        return

    lines = [f"{e['order']}. {e['name']} | {e['date']} {e['time']} ‚Äî {e['details']}" for e in events]
    calendar_edit_state[telegram_id] = {
        "events": events,
        "step": "num"
    }

    await message.answer(
        "–ù–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" + "\n".join(lines),
        reply_markup=types.ReplyKeyboardRemove()
    )


# @router.message(Command("calendar_delete"))
@router.message(F.text == "üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å")
@log_func
async def button_delete_calendar_event(message: types.Message, **kwargs):
    from bot.handlers.events import get_user_events_with_index
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    events = await get_user_events_with_index(user_id)
    if not user_id:
        await message.answer(
            "‚ÑπÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:\ncommand: '/register'",
            reply_markup=main_keyboard()
        )
        return
    if not events:
        await message.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard())
        return
    calendar_delete_state[telegram_id] = events
    text = "\n".join(f"üîπ {i + 1}. {e['name']} {e['date']} ({datetime.strptime(e['time'], '%H:%M:%S').strftime('%H:%M')})" for i, e in enumerate(events))
    await message.answer(" üìù  –í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n\n" + text + "\n\n‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n üëá     üëá     üëá     üëá     üëá     üëá     üëá")


@router.message(lambda message: calendar_delete_state.get(message.from_user.id) is not None)
@log_func
async def process_calendar_deletion(message: types.Message, **kwargs):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)
    events = calendar_delete_state.get(telegram_id)
    if not user_id or telegram_id not in calendar_delete_state:
        await message.answer(
            "‚ÑπÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:\ncommand: '/register'",
            reply_markup=main_keyboard()
        )
        return
    if not events:
        await message.answer(" ü§∑ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
        return
    try:
        num = int(message.text.strip())
        if not (1 <= num <= len(events)):
            raise ValueError
        event_item = events[num - 1]
        event_id = event_item["id"] if isinstance(event_item, dict) else event_item.id
        result = await calendar.delete_event(user_id, event_id)
        if result:
            await message.answer(" üóëÔ∏è –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_keyboard())
        else:
            await message.answer(" ü§∑ –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_keyboard())
        calendar_delete_state.pop(telegram_id, None)
    except Exception as e:
        await message.answer(f"‚ùó‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
