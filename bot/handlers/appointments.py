from aiogram.filters import Command
from aiogram import types, Router
from bot.handlers.keyboards import (
    main_keyboard, appointment_action_keyboard,
    get_users_invite_keyboard, get_invitable_users)
from asgiref.sync import sync_to_async
from bot.calendar_instance import calendar
from calendarapp.models import User, Event, Appointment
from bot.handlers.users import get_bot
from calendarapp.utils import send_invitation_to_user
from aiogram.exceptions import TelegramBadRequest

import logging

logger = logging.getLogger(__name__)

router = Router()


##### –°–¢–ê–¢–£–° –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô #####
@router.message(lambda message: message.text == "üîç  –°—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π")
async def status_button_handler(message: types.Message):
    await display_status(message)


@router.message(Command("status"))
async def display_status(message: types.Message):
    telegram_id = message.from_user.id
    user_id = await calendar.get_user_db_id(telegram_id)

    if not user_id:
        await message.answer("‚ÑπÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:\ncommand: '/register'", reply_markup=main_keyboard())
        return

    invitee_appointments = await sync_to_async(lambda: list(
        Appointment.objects.filter(invitee_id=user_id).select_related('event', 'organizer')
    ))()

    organizer_appointments = await sync_to_async(lambda: list(
        Appointment.objects.filter(organizer_id=user_id).select_related('event', 'invitee')
    ))()

    status_display = {
        "pending": "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        "confirmed": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ",
        "cancelled": "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ"
    }

    for appt in invitee_appointments:
        event = appt.event
        organizer = appt.organizer
        text = (
            f" üë§ {organizer.username}\n"
            f" üîπ {event.name}\n"
            f" üïí {event.date} {event.time.strftime('%H:%M')}\n"
            f" üëâ{status_display.get(appt.status, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        )
        if appt.status == "pending":
            keyboard = appointment_action_keyboard(appt.id)
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer(text)

    if organizer_appointments:
        text = "‚ú®üóΩ –í—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä\n\n"
        for appt in organizer_appointments:
            event = appt.event
            invitee = appt.invitee
            text += (
                f" üîπ {event.name}"
                f" üïí {event.date} {event.time.strftime('%H:%M')}\n"
                f" üßë‚Äçü§ù‚Äçüßë {invitee.username}\n"
                f" üëâ {status_display.get(appt.status, 'ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            )
        await message.answer(text, reply_markup=main_keyboard())

    if not invitee_appointments and not organizer_appointments:
        await message.answer("üîî –ù–µ—Ç –≤—Å—Ç—Ä–µ—á –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.", reply_markup=main_keyboard())


@router.callback_query(lambda cq: cq.data.startswith("invite_"))
async def invite_user_callback(callback_query: types.CallbackQuery):
    data = callback_query.data

    if data == "invite_done":
        # await callback_query.message.edit_text(
        #     "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=None
        # )
        await callback_query.message.answer(
            "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
            reply_markup=main_keyboard(),
        )
        return

    parts = data.split("_")
    if len(parts) != 3:
        await callback_query.answer(" ‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return

    _, event_id, invitee_tg_id = parts

    try:
        event_id = int(event_id)
        invitee_tg_id = int(invitee_tg_id)
        organizer_tg_id = callback_query.from_user.id

        event = await sync_to_async(Event.objects.get)(id=event_id)
        organizer = await sync_to_async(User.objects.get)(telegram_id=organizer_tg_id)
        invitee = await sync_to_async(User.objects.get)(telegram_id=invitee_tg_id)

        appointment = await sync_to_async(lambda: Appointment.objects.filter(
            event=event,
            invitee=invitee
        ).first())()

        if appointment and appointment.status in ["pending", "confirmed"]:
            await callback_query.answer(
                f"‚ö†Ô∏è {invitee.username} —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω",
                show_alert=True
            )
            return

        if not appointment or appointment.status == "cancelled":
            appointment = await sync_to_async(Appointment.objects.create)(
                event=event,
                organizer=organizer,
                invitee=invitee,
                date=event.date,
                time=event.time,
                status="pending",
            )

        result = await send_invitation_to_user(invitee, event, appointment)

        if result == "SENT":
            await callback_query.answer(f"{invitee.username} –ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ Telegram!", show_alert=True)
        else:
            await callback_query.answer(
                f"{invitee.username} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∞–π—Ç.",
                show_alert=True,
                reply_markup = main_keyboard(),
            )

        users = await get_invitable_users(event_id=event_id, exclude_user_id=organizer_tg_id)
        if not users:
            await callback_query.message.answer(
                "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ.",
                reply_markup=main_keyboard(),
            )

        else:
            keyboard = get_users_invite_keyboard(event.id, users)
            await callback_query.message.edit_text(
                "–ö–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ? –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=keyboard
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await callback_query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(lambda cq: cq.data.startswith("appt_confirm_") or cq.data.startswith("appt_cancel_"))
async def appointment_action_callback(callback: types.CallbackQuery):
    bot = await get_bot()
    data = callback.data

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback: {data}")

    try:
        if data.startswith("appt_confirm_"):
            appointment_id = int(data.replace("appt_confirm_", ""))
            action = "confirmed"
            participant_action_text = "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏!"
            organizer_action_text = "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª"
        elif data.startswith("appt_cancel_"):
            appointment_id = int(data.replace("appt_cancel_", ""))
            action = "cancelled"
            participant_action_text = "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ!"
            organizer_action_text = "–æ—Ç–∫–ª–æ–Ω–∏–ª"
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

        appointment = await sync_to_async(Appointment.objects.get)(id=appointment_id)
        invitee_telegram_id = await sync_to_async(lambda: appointment.invitee.telegram_id)()

        if callback.from_user.id != invitee_telegram_id:
            await callback.answer("–¢–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
            return

        def update_status():
            appointment.status = action
            appointment.save()

        await sync_to_async(update_status)()

        organizer_telegram_id = await sync_to_async(lambda: appointment.organizer.telegram_id)()
        invitee_username = await sync_to_async(lambda: appointment.invitee.username)()
        event_name = await sync_to_async(lambda: appointment.event.name)()

        if organizer_telegram_id:
            organizer_message = (
                f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {invitee_username} {organizer_action_text} "
                f"–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ \"{event_name}\"."
            )
            try:
                await bot.send_message(organizer_telegram_id, organizer_message)
            except TelegramBadRequest as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É (Telegram ID {organizer_telegram_id}): {e}"
                )

        await callback.message.edit_text(participant_action_text)
        await callback.answer(participant_action_text)

    except Appointment.DoesNotExist:
        await callback.answer("‚ùì–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    except ValueError as e:
        await callback.answer("‚õî–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback.answer("‚ùó\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@sync_to_async
def update_appointment_status(app_id, new_status):
    appointment = Appointment.objects.get(pk=app_id)
    appointment.status = new_status
    appointment.save()
    return appointment


@sync_to_async
def get_appointment_by_id(app_id):
    return Appointment.objects.get(pk=app_id)
